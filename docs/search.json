[{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"SelectBoost.beta algorithms","text":"SelectBoost.beta re-uses correlated-resampling machinery introduced original SelectBoost package combines Beta-regression selectors. vignette summarises main routines presents pseudo-code internal logic. goal make easy re-implement extend algorithms contexts.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"building-blocks","dir":"Articles","previous_headings":"","what":"Building blocks","title":"SelectBoost.beta algorithms","text":"following helpers expose canonical SelectBoost stages. sb_normalize() centres ℓ2\\ell_2-normalises design matrix columns. sb_compute_corr() computes correlation (user-supplied association) matrix normalised design. sb_group_variables() converts correlation matrix groups highly associated predictors given threshold c0c_0. sb_resample_groups() regenerates correlated predictors group drawing multivariate normal approximation re-normalising. sb_apply_selector_manual() applies selector resampled design collects resulting coefficient vectors. sb_selection_frequency() converts matrix coefficients selection frequencies respecting selector’s coefficient convention.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"pseudo-code-manual-workflow","dir":"Articles","previous_headings":"","what":"Pseudo-code: manual workflow","title":"SelectBoost.beta algorithms","text":"manual SelectBoost workflow follows steps regardless base selector. Pseudo-code producing selection frequencies single threshold given . practice sb_resample_groups() preserves singletons untouched. groups two predictors receive correlated draws.","code":"Procedure ManualSelectBoost(X, Y, selector, c0, B):   1. X_norm <- sb_normalize(X)   2. Corr <- sb_compute_corr(X_norm)   3. Groups <- sb_group_variables(Corr, c0)   4. Resamples <- sb_resample_groups(X_norm, Groups, B)   5. CoefMatrix <- sb_apply_selector_manual(X_norm, Resamples, Y, selector)   6. Frequencies <- sb_selection_frequency(CoefMatrix, version = \"glmnet\")   7. Return Frequencies"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"pseudo-code-correlation-grid-driver","dir":"Articles","previous_headings":"","what":"Pseudo-code: correlation grid driver","title":"SelectBoost.beta algorithms","text":"sb_beta() extends manual workflow iterating grid correlation thresholds. following pseudo-code matches behaviour exported function. selector argument can function returning numeric vector coefficients optional names. version = \"glmnet\", first entry interpreted intercept excluded selection frequencies.","code":"Algorithm sb_beta(X, Y, selector, B, step.num, steps.seq, version, squeeze):   1. If squeeze, transform Y into the open unit interval.   2. X_norm <- sb_normalize(X)   3. Corr <- sb_compute_corr(X_norm)   4. Grid <- {1} ∪ .sb_c0_sequence(Corr, step.num, steps.seq) ∪ {0}   5. For each c0 in Grid:        a. Groups <- sb_group_variables(Corr, c0)        b. If every group has size 1:             i. CoefMatrix <- selector(X_norm, Y)           Else:             i. Resamples <- sb_resample_groups(X_norm, Groups, B)            ii. For each design in Resamples:                   - CoefMatrix[, b] <- selector(design, Y)        c. Freq[c0, ] <- sb_selection_frequency(CoefMatrix, version)   6. Attach attributes (B, selector, c0 sequence) and return Freq"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"extending-the-algorithms","dir":"Articles","previous_headings":"","what":"Extending the algorithms","title":"SelectBoost.beta algorithms","text":"modular helpers designed recomposed. example, possible plug custom grouping routine calling sb_resample_groups() supply selector implements cross-validation penalisation strategies. helper relies basic R primitives, pseudo-code translates readily languages.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-algorithms.html","id":"conference-communications","dir":"Articles","previous_headings":"","what":"Conference communications","title":"SelectBoost.beta algorithms","text":"SelectBoost4Beta concepts described showcased Frédéric Bertrand Myriam Maumy 2023 : Joint Statistical Meetings 2023 (Toronto, Canada): “Improving variable selection Beta regression models using correlated resampling”. BioC2023 (Boston, USA): “SelectBoost4Beta: Improving variable selection Beta regression models”. communications detailed correlation-aware resampling strengthens variable selection performance Beta regression strong predictor dependencies.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-beta.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"SelectBoost for Beta regression","text":"new sb_beta() helper glues beta-regression selectors provided package SelectBoost-style correlated-resampling loop implemented directly SelectBoost.beta. takes care squeezing response inside open unit interval tagging output selector used. vignette walks two complementary perspectives: Reconstructing SelectBoost workflow step step betareg_step_aic() highlight correlated resampling happens. Calling sb_beta() obtain result single function call. Throughout examples rely built-simulator generate correlated design matrices handful truly associated predictors.","code":"sim <- simulation_DATA.beta(   n = 150, p = 6, s = 3, beta_size = c(1, -0.8, 0.6),   corr = \"ar1\", rho = 0.25,   mechanism = \"jitter\" ) str(sim$X) #>  num [1:150, 1:6] -0.123 1.635 1.428 -0.508 -0.243 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : NULL #>   ..$ : chr [1:6] \"x1\" \"x2\" \"x3\" \"x4\" ... summary(sim$Y) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.04934 0.25725 0.49003 0.48969 0.70233 0.99998"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-beta.html","id":"manual-selectboost-workflow-with-beta-selectors","dir":"Articles","previous_headings":"","what":"Manual SelectBoost workflow with beta selectors","title":"SelectBoost for Beta regression","text":"classic SelectBoost algorithm first normalises design matrix, computes pairwise correlations, groups variables chosen threshold finally resamples predictors applying selector. stages available directly SelectBoost.beta. element X_draws stores correlated copy normalised design. Feeding matrices sb_apply_selector_manual() together beta-regression selector yields coefficient estimates every resampled data set. Finally, sb_selection_frequency() helper counts often variable appears non-zero coefficient across replicates. betareg_step_aic() returns glmnet-style coefficient vector (intercept plus predictors), set version = \"glmnet\" computing selection frequencies. manual exercise confirms correlated resampling loop original SelectBoost package plugs seamlessly beta selectors shipped SelectBoost.beta.","code":"# Normalise the predictors (centre + L2 scale) X_norm <- sb_normalize(sim$X)  # Compute correlations corr_mat <- sb_compute_corr(X_norm)  # Group variables whose absolute correlation exceeds 0.6 raw_groups <- sb_group_variables(corr_mat, c0 = 0.6)  # Draw eight correlated replicas for the grouped variables X_draws <- sb_resample_groups(X_norm, raw_groups, B = 8, seed = 11)  dim(X_draws[[1]]) #> [1] 150   6 coef_path <- sb_apply_selector_manual(   X_norm, X_draws, sim$Y, selector = betareg_step_aic )  dim(coef_path) #> [1] 7 8 coef_path[, 1:3] #>                    sim1        sim2        sim3 #> (Intercept) -0.03588528 -0.03588528 -0.03588528 #> x1          11.34931343 11.34931343 11.34931343 #> x2          -8.95724666 -8.95724666 -8.95724666 #> x3           7.17554325  7.17554325  7.17554325 #> x4           0.00000000  0.00000000  0.00000000 #> x5           0.87055660  0.87055660  0.87055660 #> x6           0.00000000  0.00000000  0.00000000 sel_freq <- sb_selection_frequency(coef_path, version = \"glmnet\") sel_freq #> x1 x2 x3 x4 x5 x6  #>  1  1  1  0  1  0"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-beta.html","id":"running-the-entire-loop-with-sb_beta","dir":"Articles","previous_headings":"","what":"Running the entire loop with sb_beta()","title":"SelectBoost for Beta regression","text":"sb_beta() wrapper performs steps internally exposing arguments relevant beta regression. default uses betareg_step_aic() base selector, exported functions (\"betareg_step_bic\", betareg_glmnet, etc.) can passed either name function. Changing selector simply matter passing different routine. call uses GAMLSS-based elastic-net variant asks sb_beta() pass choose = \"bic\" underlying betareg_glmnet() implementation. wrapper always builds correlated resamples, results directly comparable across selectors long adopt glmnet-style coefficient convention. makes straightforward run stability analyses interval responses pairing sb_beta() fastboost_interval() compare several beta selectors exact resampled design matrices.","code":"sb <- sb_beta(   sim$X, sim$Y,   B = 60,   step.num = 0.5,   steps.seq = c(0.9, 0.7, 0.5) )  class(sb) #> [1] \"sb_beta\" \"matrix\"  \"array\" attr(sb, \"selector\") #> [1] \"betareg_step_aic\" rownames(sb) #> [1] \"c0 = 1.000\" \"c0 = 0.900\" \"c0 = 0.700\" \"c0 = 0.500\" \"c0 = 0.000\" round(sb, 3) #>               x1    x2    x3    x4   x5    x6 #> c0 = 1.000 1.000 1.000 1.000 0.000 1.00 0.000 #> c0 = 0.900 1.000 1.000 1.000 0.000 1.00 0.000 #> c0 = 0.700 1.000 1.000 1.000 0.000 1.00 0.000 #> c0 = 0.500 1.000 1.000 1.000 0.000 1.00 0.000 #> c0 = 0.000 0.117 0.133 0.117 0.167 0.15 0.167 #> attr(,\"c0.seq\") #> [1] 1.0 0.9 0.7 0.5 0.0 #> attr(,\"steps.seq\") #> [1] 0.9 0.7 0.5 #> attr(,\"B\") #> [1] 60 #> attr(,\"selector\") #> [1] \"betareg_step_aic\" #> attr(,\"class\") #> [1] \"sb_beta\" \"matrix\"  \"array\" sb_enet <- sb_beta(   sim$X, sim$Y,   selector = betareg_glmnet,   B = 60,   step.num = 0.5,   version = \"glmnet\",   choose = \"bic\",   prestandardize = TRUE )  attr(sb_enet, \"selector\") #> [1] \"betareg_glmnet\" colMeans(sb_enet) #>         x1         x2         x3         x4         x5         x6  #> 0.34444444 0.34444444 0.33888889 0.35000000 0.33888889 0.01111111"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/selectboost-beta.html","id":"conference-communications","dir":"Articles","previous_headings":"","what":"Conference communications","title":"SelectBoost for Beta regression","text":"SelectBoost4Beta workflow correlated resampling foundations presented Frédéric Bertrand Myriam Maumy 2023 two conferences: Joint Statistical Meetings 2023 (Toronto, Canada) — “Improving variable selection Beta regression models using correlated resampling”. BioC2023 (Boston, USA) — “SelectBoost4Beta: Improving variable selection Beta regression models”. communications emphasised leveraging correlation-aware resampling improves recall precision variable selection high-dimensional Beta regression settings.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Simulating interval Beta data","text":"simulation_DATA.beta() helper produces beta-regression design matrices paired either fully observed responses interval-censored outcomes. vignette illustrates typical workflow drawing single data set structured correlation custom missingness behaviour mimics practical survey settings. simulate 300 observations 10 candidate predictors. Four predictors truly associated response coefficients specified beta_size. Correlation among predictors follows AR(1) structure governed rho, conveniently induces near-multicollinearity remaining positive-definite.","code":"sim <- simulation_DATA.beta(   n = 300, p = 10, s = 4, beta_size = c(1.0, -0.8, 0.6, -0.5),   corr = \"ar1\", rho = 0.25,   mechanism = \"mixed\", mix_prob = 0.5,   delta = function(mu, X) 0.03 + 0.02 * abs(mu - 0.5),   alpha = function(mu, X) 0.1 + 0.05 * (mu < 0.3),   na_rate = 0.1, na_side = \"random\" )"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"interval-generation-parameters","dir":"Articles","previous_headings":"Overview","what":"Interval-generation parameters","title":"Simulating interval Beta data","text":"delta alpha callbacks control often simulated outcome converted interval wide interval : delta(mu, X) encodes expected half-width interval around latent mean response mu. allow wider intervals mean far 0.5, highlighting heteroskedastic behaviour. alpha(mu, X) represents observation-specific inflation probability. latent mean 0.3, function returns larger values, creating lower-bound censoring small mu. mechanism = \"mixed\" mix_prob = 0.5, half affected observations receive two-sided intervals, whereas remainder experience one-sided censoring driven na_side = \"random\".","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"inspecting-the-simulated-outcomes","dir":"Articles","previous_headings":"Overview","what":"Inspecting the simulated outcomes","title":"Simulating interval Beta data","text":"output contains design matrix X, fully observed latent response Y, interval bounds Y_low/Y_high. following summaries check distribution latent response frequency interval-censoring. better understand resulting intervals can look small excerpt censored rows. Observations NA one side correspond one-sided censoring events.","code":"summary(sim$Y) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> 0.0000517 0.2753408 0.5128178 0.4911643 0.6876537 0.9995677 mean(is.na(sim$Y_low) | is.na(sim$Y_high)) #> [1] 0.1 head(sim$Y_low, 10) #>  [1] 0.55301097 0.50072064 0.01690175 0.60189344 0.57207920 0.65266844 #>  [7]         NA 0.49181880 0.65886834 0.61582960 head(sim$Y_high, 10) #>  [1] 0.6134735 0.5639810 0.1837695 0.6631390 0.8845549 0.7249995 0.6155794 #>  [8] 0.8290800 0.7290462 0.9109949"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"visualising-interval-widths","dir":"Articles","previous_headings":"Overview","what":"Visualising interval widths","title":"Simulating interval Beta data","text":"difference Y_high Y_low conveys much uncertainty interval carries. observation fully observed bounds coincide Y, leading zero width. histogram demonstrates , even modest base width 0.03, adaptive component delta() creates long right tail mean moves away centre unit interval.  simulated objects can passed directly modelling routines SelectBoost.beta. following sections outline turn generated intervals pseudo-observations classical selectors, obtain stable frequencies interval-aware fastboost routine, visualise results side side.","code":"interval_width <- sim$Y_high - sim$Y_low hist(interval_width, breaks = 30, col = \"#0A6AA6\", border = \"white\",      main = \"Distribution of simulated interval widths\",      xlab = \"Y_high - Y_low\")"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"point-response-selectors-on-pseudo-observations","dir":"Articles","previous_headings":"","what":"Point-response selectors on pseudo-observations","title":"Simulating interval Beta data","text":"interval bounds observed, quick way obtain point response impute either midpoint available bound case one-sided censoring. helper keeps midpoint bounds present falls back observed edge otherwise. pseudo-response hand, can deploy full suite selectors shipped package. compare_selectors_single() wrapper runs stepwise AIC/BIC/AICc procedures, GAMLSS-based LASSO IRLS/glmnet approach one call. Setting include_enet = FALSE ensures example remains lightweight even optional gamlss.lasso extension installed. bootstrap helper compare_selectors_bootstrap() repeats exercise resampled datasets, providing empirical selection frequencies method. Merging outputs compare_table() gives compact summary containing per-run coefficients associated bootstrap frequencies.","code":"pseudo_y <- ifelse(   is.na(sim$Y_low) | is.na(sim$Y_high),   ifelse(is.na(sim$Y_low), sim$Y_high, sim$Y_low),   0.5 * (sim$Y_low + sim$Y_high) ) single <- compare_selectors_single(sim$X, pseudo_y, include_enet = FALSE) head(single$table) #>    selector variable       coef selected #> x1      AIC       x1  0.9204344     TRUE #> x2      AIC       x2 -0.7552439     TRUE #> x3      AIC       x3  0.5566513     TRUE #> x4      AIC       x4 -0.4996924     TRUE #> x5      AIC       x5  0.0000000    FALSE #> x6      AIC       x6  0.0000000    FALSE freq <- compare_selectors_bootstrap(   sim$X, pseudo_y, B = 15, include_enet = FALSE, seed = 321 ) head(freq) #>    selector variable       freq #> x1      AIC       x1 1.00000000 #> x2      AIC       x2 1.00000000 #> x3      AIC       x3 1.00000000 #> x4      AIC       x4 1.00000000 #> x5      AIC       x5 0.26666667 #> x6      AIC       x6 0.06666667 summary_tab <- compare_table(single$table, freq) head(summary_tab) #>   selector variable       coef selected      freq #> 1      AIC       x1  0.9204344     TRUE 1.0000000 #> 2      AIC      x10  0.0000000    FALSE 0.2000000 #> 3      AIC       x2 -0.7552439     TRUE 1.0000000 #> 4      AIC       x3  0.5566513     TRUE 1.0000000 #> 5      AIC       x4 -0.4996924     TRUE 1.0000000 #> 6      AIC       x5  0.0000000    FALSE 0.2666667"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"visual-comparisons","dir":"Articles","previous_headings":"","what":"Visual comparisons","title":"Simulating interval Beta data","text":"package offers quick visualisation helpers default base graphics automatically use ggplot2 available. coefficient heatmap highlights variables selected estimated effect sizes across selectors.  Selection frequencies bootstrap stage can plotted manner, providing stability-oriented counterpart coefficient map.","code":"plot_compare_coeff(single$table) plot_compare_freq(freq)"},{"path":"https://fbertran.github.io/SelectBoost.beta/articles/simulate-interval-beta.html","id":"interval-stability-selection-with-fastboost_interval","dir":"Articles","previous_headings":"","what":"Interval stability selection with fastboost_interval","title":"Simulating interval Beta data","text":"Instead reducing intervals single values, fastboost_interval() routine repeatedly samples pseudo-responses inside interval running chosen selector. resulting selection frequencies account uncertainty carried censored observations. additions demonstrate simulation engine, collection selectors, fast interval booster interact cohesive workflow interval-valued beta regression problems.","code":"fb <- fastboost_interval(   sim$X, sim$Y_low, sim$Y_high,   func = function(X, y) betareg_glmnet(X, y, choose = \"bic\", prestandardize = TRUE),   B = 30, seed = 99 ) sort(fb$freq, decreasing = TRUE)[1:5] #>        x1        x2        x3        x4        x8  #> 1.0000000 1.0000000 1.0000000 1.0000000 0.7333333"},{"path":"https://fbertran.github.io/SelectBoost.beta/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frederic Bertrand. Maintainer, author.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frédéric Bertrand (2025). Stability-Selection via Correlated Resampling Beta-Regression Models, R package version 0.4.5. Frédéric Bertrand Myriam Maumy (2023). Improving variable selection Beta regression models using correlated resampling. Joint Statistical Meetings 2023, Toronto, Canada. Frédéric Bertrand Myriam Maumy (2023). SelectBoost4Beta: Improving variable selection Beta regression models. BioC2023, Boston, MA, USA.","code":"@Manual{,   title = {Stability-Selection via Correlated Resampling for Beta-Regression Models},   author = {Frederic Bertrand},   year = {2025},   note = {R package version 0.4.5}, } @InProceedings{,   title = {Improving variable selection in Beta regression models using correlated resampling},   author = {Frédéric Bertrand and Myriam Maumy},   year = {2023},   booktitle = {Joint Statistical Meetings 2023},   address = {Toronto, Canada},   keywords = {generalized linear models linear models resampling simulation variable selection}, } @InProceedings{,   title = {SelectBoost4Beta: Improving variable selection in Beta regression models},   author = {Frédéric Bertrand and Myriam Maumy},   year = {2023},   booktitle = {BioC2023},   address = {Boston, MA, USA}, }"},{"path":"https://fbertran.github.io/SelectBoost.beta/index.html","id":"selectboostbeta-","dir":"","previous_headings":"","what":"Stability-Selection via Correlated Resampling for Beta-Regression Models","title":"Stability-Selection via Correlated Resampling for Beta-Regression Models","text":"growth big data, variable selection become one major challenges statistics. Although many methods proposed literature performance terms recall precision limited context number variables far exceeds number observations high correlated setting. Results: SelectBoost.beta brings correlation-aware resampling strategy original SelectBoost package beta regression implementing extension SelectBoost algorithm, F. Bertrand, . Aouadi, N. Jung, R. Carapito, L. Vallat, S. Bahram, M. Maumy-Bertrand (2015) https://doi.org/10.1093/bioinformatics/btaa855 https://doi.org/10.32614/CRAN.package.SelectBoost. ships : wrappers betareg_step_aic() betareg_glmnet() act base selectors beta-distributed outcomes; helper functions (sb_normalize(), sb_group_variables(), sb_resample_groups(), …) mirroring core stages SelectBoost; high-level sb_beta() driver orchestrates normalisation, correlation analysis, grouped resampling stability tallying single call. package designed stage workflow remains reusable . Users can plug custom grouping strategies selectors still benefiting correlated resampling.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/index.html","id":"conference-presentations","dir":"","previous_headings":"","what":"Conference presentations","title":"Stability-Selection via Correlated Resampling for Beta-Regression Models","text":"SelectBoost4Beta approach presented Frédéric Bertrand Myriam Maumy Joint Statistical Meetings 2023 Toronto (“Improving variable selection Beta regression models using correlated resampling”) BioC2023 Boston (“SelectBoost4Beta: Improving variable selection Beta regression models”). communications highlighted correlated resampling boosts variable selection Beta regression high-dimensional, strongly correlated settings.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stability-Selection via Correlated Resampling for Beta-Regression Models","text":"can install released version SelectBoost.beta CRAN : can install development version SelectBoost.beta github : selectors rely betareg, glmnet, gamlss ecosystems. packages pulled automatically installing source.","code":"install.packages(\"SelectBoost.beta\") devtools::install_github(\"fbertran/SelectBoost.beta\")"},{"path":"https://fbertran.github.io/SelectBoost.beta/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Stability-Selection via Correlated Resampling for Beta-Regression Models","text":"Simulate correlated design, run manual SelectBoost steps betareg_step_aic(), compute selection frequencies: sb_beta() wrapper performs entire loop internally returns matrix indexed correlation thresholds used resampling: plot chunk unnamed-chunk-7 plot chunk unnamed-chunk-8 Refer vignettes detailed walk-workflow pseudo-code underpinning algorithms.","code":"library(SelectBoost.beta) set.seed(42)  sim <- simulation_DATA.beta(n = 150, p = 6, s = 3, beta_size = c(1, -0.8, 0.6)) X_norm <- sb_normalize(sim$X) corr_mat <- sb_compute_corr(X_norm) groups <- sb_group_variables(corr_mat, c0 = 0.6) resamples <- sb_resample_groups(X_norm, groups, B = 50) coef_path <- sb_apply_selector_manual(X_norm, resamples, sim$Y, betareg_step_aic) sel_freq <- sb_selection_frequency(coef_path, version = \"glmnet\") sel_freq #> x1 x2 x3 x4 x5 x6  #>  1  1  1  0  0  0 sb <- sb_beta(sim$X, sim$Y, B = 50, step.num = 0.25) print(sb) #>              x1   x2   x3   x4   x5   x6 #> c0 = 1.000 1.00 1.00 1.00 0.00 0.00 0.00 #> c0 = 0.089 0.22 0.18 0.10 0.18 0.18 0.16 #> c0 = 0.059 0.10 0.12 0.20 0.20 0.16 0.28 #> c0 = 0.030 0.16 0.20 0.12 0.08 0.16 0.14 #> c0 = 0.000 0.28 0.22 0.12 0.08 0.18 0.18 #> attr(,\"c0.seq\") #> [1] 1.00000000 0.08894615 0.05949716 0.03010630 0.00000000 #> attr(,\"steps.seq\") #> [1] 0.08894615 0.05949716 0.03010630 #> attr(,\"B\") #> [1] 50 #> attr(,\"selector\") #> [1] \"betareg_step_aic\" #> attr(,\"class\") #> [1] \"sb_beta\" \"matrix\"  \"array\" attr(sb, \"selector\") #> [1] \"betareg_step_aic\" attr(sb, \"c0.seq\") #> [1] 1.00000000 0.08894615 0.05949716 0.03010630 0.00000000 freq <- suppressWarnings(compare_selectors_bootstrap(   sim$X, sim$Y, B = 100, include_enet = TRUE, seed = 321 )) head(freq) #>    selector variable freq #> x1      AIC       x1 1.00 #> x2      AIC       x2 1.00 #> x3      AIC       x3 1.00 #> x4      AIC       x4 0.27 #> x5      AIC       x5 0.14 #> x6      AIC       x6 0.19 plot_compare_coeff(single$table) plot_compare_freq(freq)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/SelectBoost.beta-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SelectBoost.beta: Stability-Selection via Correlated Resampling for Beta-Regression Models — SelectBoost.beta-package","title":"SelectBoost.beta: Stability-Selection via Correlated Resampling for Beta-Regression Models — SelectBoost.beta-package","text":"Adds variable-selection functions Beta regression models (mean submodel) can used within 'SelectBoost' algorithm. Includes stepwise 'AIC'/'BIC'/'AICc' betareg() fits, 'GAMLSS'-based LASSO/Elastic-Net, pure 'glmnet' 'IRLS'-based selector optional standardization speedup, C++ helpers 'IRLS' working steps precision updates. Also provides fastboost_interval() variant interval responses, comparison helpers, flexible simulator simulation_DATA.beta() interval-valued data. 'SelectBoost4Beta' framework presented Bertrand 'Maumy' (2023) Joint Statistical Meetings 2023 (Toronto, Canada) 'BioC2023' (Boston, USA), highlighting correlated resampling Beta-regression variable selection.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/SelectBoost.beta-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SelectBoost.beta: Stability-Selection via Correlated Resampling for Beta-Regression Models — SelectBoost.beta-package","text":"Bertrand, F. Maumy, M. (2023). Improving variable selection Beta regression models using correlated resampling. Presented Joint Statistical Meetings 2023, Toronto, Canada. Bertrand, F. Maumy, M. (2023). SelectBoost4Beta: Improving variable selection Beta regression models. Presented BioC2023, Boston, USA.","code":""},{"path":[]},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/SelectBoost.beta-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SelectBoost.beta: Stability-Selection via Correlated Resampling for Beta-Regression Models — SelectBoost.beta-package","text":"package written Frédéric Bertrand. Maintainer: Frédéric Bertrand frederic.bertrand@lecnam.net","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/SelectBoost.beta-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SelectBoost.beta: Stability-Selection via Correlated Resampling for Beta-Regression Models — SelectBoost.beta-package","text":"","code":"set.seed(1) n <- 150; p <- 6 X <- matrix(rnorm(n*p), n, p); colnames(X) <- paste0(\"x\",1:p) eta <- 0.4 + X[,1] - 0.7*X[,3] mu  <- plogis(eta) Y   <- rbeta(n, mu*25, (1-mu)*25)  betareg_step_aic(X, Y)    # should return (Intercept) + x1,x3 nonzero often #> (Intercept)          x1          x2          x3          x4          x5  #>   0.3840811   1.0104247   0.0000000  -0.6555926   0.0000000   0.0000000  #>          x6  #>   0.0000000  betareg_step_bic(X, Y) #> (Intercept)          x1          x2          x3          x4          x5  #>   0.3840811   1.0104247   0.0000000  -0.6555926   0.0000000   0.0000000  #>          x6  #>   0.0000000  betareg_step_aicc(X, Y) #> (Intercept)          x1          x2          x3          x4          x5  #>   0.3840811   1.0104247   0.0000000  -0.6555926   0.0000000   0.0000000  #>          x6  #>   0.0000000"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_enet_gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","title":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","text":"Uses gamlss.lasso::gnet() fit ENet mean submodel gamlss(dist = ).","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_enet_gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","text":"","code":"betareg_enet_gamlss(   X,   Y,   method = c(\"IC\", \"CV\"),   ICpen = c(\"BIC\", \"AIC\", \"HQC\"),   alpha = 1,   trace = FALSE )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_enet_gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. method \"IC\" (information criterion) \"CV\". ICpen Penalty \"IC\" selection: \"BIC\", \"AIC\", \"HQC\". alpha Elastic-net mixing (1 = LASSO, 0 = ridge). trace Logical; print stepwise trace.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_enet_gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","text":"Named numeric vector coefficients betareg_lasso_gamlss().","code":""},{"path":[]},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_enet_gamlss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta regression Elastic-Net via GAMLSS (gamlss.lasso) — betareg_enet_gamlss","text":"","code":"if (requireNamespace(\"gamlss.lasso\", quietly = TRUE)) {   set.seed(1)   X <- matrix(rnorm(300), 100, 3)   Y <- plogis(X[, 1])   Y <- rbeta(100, Y * 30, (1 - Y) * 30)   betareg_enet_gamlss(X, Y, method = \"IC\", ICpen = \"BIC\", alpha = 0.8) } #> Error in gamlss.gnet(data[[\"gnet(x.vars = c(\\\"X1\\\", \\\"X2\\\", \\\"X3\\\"), method = \\\"IC\\\", ICpen = \\\"BIC\\\", control = gnet_control(alpha = 0.8, standardize = TRUE))\"]],     z, w): could not find function \"gamlss.gnet\""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_glmnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","title":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","text":"Runs IRLS loop Beta working responses/weights calls glmnet weighted least-squares surrogate. Supports BIC/AIC/CV model choice optional prestandardize speedup.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_glmnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","text":"","code":"betareg_glmnet(   X,   Y,   alpha = 1,   choose = c(\"bic\", \"aic\", \"cv\"),   nfolds = 5,   n_iter = 6,   tol = 1e-05,   standardize = TRUE,   lambda = NULL,   phi_init = 20,   update_phi = TRUE,   phi_maxit = 5,   prestandardize = FALSE,   trace = FALSE )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_glmnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. alpha Elastic-net mixing parameter. choose One \"bic\", \"aic\", \"cv\" pick lambda. nfolds Folds CV choose = \"cv\". n_iter Max IRLS iterations; tol Convergence tolerance IRLS parameter change (Euclidean norm difference [a0, beta]), default 1e-5. standardize Forwarded glmnet (ignored prestandardize = TRUE). lambda Optional fixed lambda; NULL, chosen choose. phi_init Initial precision (phi). update_phi Logical; update phi inside IRLS loop. phi_maxit Newton steps phi update. prestandardize TRUE, manually center/scale X disable glmnet's internal standardization (speed trick). trace Logical; print IRLS progress.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_glmnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","text":"Named numeric vector (Intercept) + colnames(X) zeros unselected variables.","code":""},{"path":[]},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_glmnet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pure glmnet IRLS selector for Beta regression — betareg_glmnet","text":"","code":"set.seed(1); X <- matrix(rnorm(500), 100, 5); Y <- plogis(X[,1]-0.5*X[,3]) Y <- rbeta(100, Y*40, (1-Y)*40) betareg_glmnet(X, Y, alpha = 1, choose = \"bic\", prestandardize = TRUE) #> (Intercept)          X1          X2          X3          X4          X5  #>  0.02373154  0.90342704  0.00000000 -0.44090079  0.00000000  0.00000000"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_lasso_gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","title":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","text":"Uses gamlss::ri() (L1 penalty) gamlss(dist = ) mean submodel select variables.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_lasso_gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","text":"","code":"betareg_lasso_gamlss(   X,   Y,   method = c(\"ML\", \"GAIC\"),   k = 2,   degf = NULL,   lambda = NULL,   trace = FALSE )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_lasso_gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. method \"ML\" \"GAIC\" (see gamlss::ri). k Penalty multiplier GAIC method = \"GAIC\". degf Optional degrees freedom L1 term. lambda Optional penalty strength. trace Logical; print stepwise trace.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_lasso_gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","text":"Named numeric vector coefficients (Intercept) + colnames(X), 0 unselected variables.","code":""},{"path":[]},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_lasso_gamlss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta regression LASSO via GAMLSS — betareg_lasso_gamlss","text":"","code":"set.seed(1); X <- matrix(rnorm(300), 100, 3); Y <- plogis(X[,1]); Y <- rbeta(100, Y*30, (1-Y)*30) betareg_lasso_gamlss(X, Y, method = \"GAIC\", k = 2) #>   (Intercept)            X1            X2            X3  #>  9.964032e-02  8.139031e-01 -1.277365e-04  2.804953e-06"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aic.html","id":null,"dir":"Reference","previous_headings":"","what":"Stepwise Beta regression by AIC — betareg_step_aic","title":"Stepwise Beta regression by AIC — betareg_step_aic","text":"Fits mean-submodel Beta regression betareg performs stepwise subset selection using AIC.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stepwise Beta regression by AIC — betareg_step_aic","text":"","code":"betareg_step_aic(   X,   Y,   direction = \"both\",   link = \"logit\",   link.phi = \"log\",   type = \"ML\",   trace = FALSE,   max_steps = NULL,   epsilon = 1e-08 )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stepwise Beta regression by AIC — betareg_step_aic","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. direction Stepwise direction: \"\", \"forward\", \"backward\". link Link mean submodel (passed betareg), default \"logit\". link.phi Link precision parameter, default \"log\". type Likelihood type betareg, e.g. \"ML\". trace Logical; print stepwise trace. max_steps Integer; maximum number greedy steps (default p). epsilon Numeric; minimum AIC improvement required accept move (default 1e-8).","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stepwise Beta regression by AIC — betareg_step_aic","text":"Named numeric vector length p+1 (Intercept) one coefficient per column X. Nonselected variables 0.","code":""},{"path":[]},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stepwise Beta regression by AIC — betareg_step_aic","text":"","code":"set.seed(1) X <- matrix(rnorm(200), 100, 2); Y <- plogis(0.5 + X[,1]-X[,2]); Y <- rbeta(100, Y*20, (1-Y)*20) betareg_step_aic(X, Y) #> (Intercept)          X1          X2  #>   0.3941879   0.9889555  -0.8456512"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aicc.html","id":null,"dir":"Reference","previous_headings":"","what":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","title":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","text":"Greedy forward/backward search minimizing AICc computed betareg fits.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aicc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","text":"","code":"betareg_step_aicc(   X,   Y,   direction = \"both\",   link = \"logit\",   link.phi = \"log\",   type = \"ML\",   trace = FALSE,   max_steps = NULL,   epsilon = 1e-08 )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aicc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. direction Stepwise direction: \"\", \"forward\", \"backward\". link Link mean submodel (passed betareg), default \"logit\". link.phi Link precision parameter, default \"log\". type Likelihood type betareg, e.g. \"ML\". trace Logical; print stepwise trace. max_steps Maximum number greedy steps (default p). epsilon Minimal AICc improvement accept move.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aicc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","text":"See betareg_step_aic().","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_aicc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stepwise Beta regression by AICc (finite-sample corrected AIC) — betareg_step_aicc","text":"","code":"set.seed(1); X <- matrix(rnorm(400), 100, 4); Y <- plogis(X[,1]+0.5*X[,2]) Y <- rbeta(100, Y*25, (1-Y)*25); betareg_step_aicc(X, Y) #>  (Intercept)           X1           X2           X3           X4  #> -0.009987406  1.044515121  0.532545592  0.000000000  0.000000000"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_bic.html","id":null,"dir":"Reference","previous_headings":"","what":"Stepwise Beta regression by BIC — betareg_step_bic","title":"Stepwise Beta regression by BIC — betareg_step_bic","text":"Stepwise Beta regression BIC","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_bic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stepwise Beta regression by BIC — betareg_step_bic","text":"","code":"betareg_step_bic(   X,   Y,   direction = \"both\",   link = \"logit\",   link.phi = \"log\",   type = \"ML\",   trace = FALSE,   max_steps = NULL,   epsilon = 1e-08 )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_bic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stepwise Beta regression by BIC — betareg_step_bic","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. direction Stepwise direction: \"\", \"forward\", \"backward\". link Link mean submodel (passed betareg), default \"logit\". link.phi Link precision parameter, default \"log\". type Likelihood type betareg, e.g. \"ML\". trace Logical; print stepwise trace. max_steps Integer; maximum number greedy steps (default p). epsilon Numeric; minimum AIC improvement required accept move (default 1e-8).","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_bic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stepwise Beta regression by BIC — betareg_step_bic","text":"See betareg_step_aic().","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/betareg_step_bic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stepwise Beta regression by BIC — betareg_step_bic","text":"","code":"set.seed(1); X <- matrix(rnorm(300), 100, 3); Y <- plogis(X[,1]); Y <- rbeta(100, Y*30, (1-Y)*30) betareg_step_bic(X, Y) #>  (Intercept)           X1           X2           X3  #> -0.001531718  0.932506105  0.000000000  0.000000000"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","title":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","text":"Bootstraps dataset B times records often variable selected selector. Observations containing NA either X Y removed prior resampling.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","text":"","code":"compare_selectors_bootstrap(X, Y, B = 50, include_enet = TRUE, seed = NULL)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. B Number bootstrap replications. include_enet Logical; include ENet gamlss.lasso installed. seed Optional RNG seed.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","text":"Long data frame columns selector, variable, freq [0,1].","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap selection frequencies across selectors — compare_selectors_bootstrap","text":"","code":"set.seed(1) X <- matrix(rnorm(300), 100, 3); Y <- plogis(X[, 1]) Y <- rbeta(100, Y * 30, (1 - Y) * 30) freq <- compare_selectors_bootstrap(X, Y, B = 10, include_enet = FALSE) head(freq) #>     selector variable freq #> X1       AIC       X1  1.0 #> X2       AIC       X2  0.0 #> X3       AIC       X3  0.5 #> X11      BIC       X1  1.0 #> X21      BIC       X2  0.0 #> X31      BIC       X3  0.0"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all selectors once on a dataset — compare_selectors_single","title":"Run all selectors once on a dataset — compare_selectors_single","text":"Convenience wrapper runs AIC/BIC/AICc stepwise, GAMLSS LASSO (ENet available), pure glmnet IRLS selector, collates coefficients long table comparison. Observations containing NA either X Y removed prior fitting.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all selectors once on a dataset — compare_selectors_single","text":"","code":"compare_selectors_single(X, Y, include_enet = TRUE)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all selectors once on a dataset — compare_selectors_single","text":"X Numeric matrix (n × p) predictors. Y Numeric response (0,1). Values squeezed (0,1) internally. include_enet Logical; include ENet gamlss.lasso installed.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all selectors once on a dataset — compare_selectors_single","text":"list : coefs Named coefficient vectors selector. table Long data frame columns selector, variable, coef, selected.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_selectors_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all selectors once on a dataset — compare_selectors_single","text":"","code":"set.seed(1) X <- matrix(rnorm(300), 100, 3); Y <- plogis(X[, 1]) Y <- rbeta(100, Y * 30, (1 - Y) * 30) single <- compare_selectors_single(X, Y, include_enet = FALSE) head(single$table) #>     selector variable      coef selected #> X1       AIC       X1 0.9325061     TRUE #> X2       AIC       X2 0.0000000    FALSE #> X3       AIC       X3 0.0000000    FALSE #> X11      BIC       X1 0.9325061     TRUE #> X21      BIC       X2 0.0000000    FALSE #> X31      BIC       X3 0.0000000    FALSE"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge single-run results and bootstrap frequencies — compare_table","title":"Merge single-run results and bootstrap frequencies — compare_table","text":"Merge single-run results bootstrap frequencies","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge single-run results and bootstrap frequencies — compare_table","text":"","code":"compare_table(single_tab, freq_tab = NULL)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge single-run results and bootstrap frequencies — compare_table","text":"single_tab Data frame returned compare_selectors_single()[[\"table\"]]. freq_tab Optional frequency table compare_selectors_bootstrap().","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge single-run results and bootstrap frequencies — compare_table","text":"Merged data frame.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/compare_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge single-run results and bootstrap frequencies — compare_table","text":"","code":"single_tab <- data.frame(   selector = rep(c(\"AIC\", \"BIC\"), each = 3),   variable = rep(paste0(\"x\", 1:3), times = 2),   coef = c(0.5, 0, -0.2, 0.6, 0.1, -0.3) ) single_tab$selected <- single_tab$coef != 0 freq_tab <- data.frame(   selector = rep(c(\"AIC\", \"BIC\"), each = 3),   variable = rep(paste0(\"x\", 1:3), times = 2),   freq = c(0.9, 0.15, 0.4, 0.85, 0.3, 0.25) ) compare_table(single_tab, freq_tab) #>   selector variable coef selected freq #> 1      AIC       x1  0.5     TRUE 0.90 #> 2      AIC       x2  0.0    FALSE 0.15 #> 3      AIC       x3 -0.2     TRUE 0.40 #> 4      BIC       x1  0.6     TRUE 0.85 #> 5      BIC       x2  0.1     TRUE 0.30 #> 6      BIC       x3 -0.3     TRUE 0.25"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/fastboost_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval-response stability selection (fastboost variant) — fastboost_interval","title":"Interval-response stability selection (fastboost variant) — fastboost_interval","text":"Repeats selection interval-valued responses sampling pseudo-response interval (uniformly midpoint), tallying variable selection frequencies across B replicates.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/fastboost_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval-response stability selection (fastboost variant) — fastboost_interval","text":"","code":"fastboost_interval(   X,   Y_low,   Y_high,   func,   B = 100,   sample = c(\"uniform\", \"midpoint\"),   version = \"glmnet\",   use.parallel = FALSE,   seed = NULL,   ... )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/fastboost_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interval-response stability selection (fastboost variant) — fastboost_interval","text":"X Numeric matrix (n × p). Y_low, Y_high Interval bounds [0,1]. Rows missing bounds dropped. func Function function(X, y, ...) returning named coefficient vector selectors (nonselected = 0). B Number interval resamples. sample \"uniform\" (default) \"midpoint\" drawing pseudo-responses. version Ignored (reserved future). use.parallel Use parallel::mclapply available. seed Optional RNG seed. ... Extra args forwarded func.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/fastboost_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interval-response stability selection (fastboost variant) — fastboost_interval","text":"list : betas B × (p+1) matrix coefficients replicates. freq Named vector selection frequencies predictor.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/fastboost_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interval-response stability selection (fastboost variant) — fastboost_interval","text":"","code":"# suppose you have interval data (Y_low, Y_high) set.seed(1) n <- 120; p <- 6 X <- matrix(rnorm(n*p), n, p); colnames(X) <- paste0(\"x\",1:p) mu <- plogis(X[,1] - 0.5*X[,2]); Y <- rbeta(n, mu*25, (1-mu)*25) Y_low <- pmax(0, Y - 0.05); Y_high <- pmin(1, Y + 0.05) fb <- fastboost_interval(X, Y_low, Y_high,        func = function(X,y) betareg_glmnet(X,y, choose=\"bic\", prestandardize=TRUE),        B = 40) sort(fb$freq, decreasing = TRUE) #> x1 x2 x3 x4 x5 x6  #>  1  1  0  0  0  0"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_coeff.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side coefficient heatmap — plot_compare_coeff","title":"Side-by-side coefficient heatmap — plot_compare_coeff","text":"Visual comparison coefficients returned selector. Requires ggplot2.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_coeff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side coefficient heatmap — plot_compare_coeff","text":"","code":"plot_compare_coeff(single_tab)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_coeff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side coefficient heatmap — plot_compare_coeff","text":"single_tab Data frame returned compare_selectors_single()[[\"table\"]].","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_coeff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side coefficient heatmap — plot_compare_coeff","text":"ggplot object ggplot2 available; otherwise draws base R image.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_coeff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Side-by-side coefficient heatmap — plot_compare_coeff","text":"","code":"demo_tab <- data.frame(   selector = rep(c(\"AIC\", \"BIC\"), each = 3),   variable = rep(paste0(\"x\", 1:3), times = 2),   coef = c(0.6, 0, -0.2, 0.55, 0.05, -0.3) ) demo_tab$selected <- demo_tab$coef != 0 plot_compare_coeff(demo_tab)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Side-by-side selection-frequency heatmap — plot_compare_freq","title":"Side-by-side selection-frequency heatmap — plot_compare_freq","text":"Visual comparison bootstrap selection frequencies selector. Requires ggplot2.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Side-by-side selection-frequency heatmap — plot_compare_freq","text":"","code":"plot_compare_freq(freq_tab)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Side-by-side selection-frequency heatmap — plot_compare_freq","text":"freq_tab Data frame returned compare_selectors_bootstrap().","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Side-by-side selection-frequency heatmap — plot_compare_freq","text":"ggplot object ggplot2 available; otherwise draws base R image.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/plot_compare_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Side-by-side selection-frequency heatmap — plot_compare_freq","text":"","code":"freq_tab <- data.frame(   selector = rep(c(\"AIC\", \"BIC\"), each = 3),   variable = rep(paste0(\"x\", 1:3), times = 2),   freq = c(0.85, 0.2, 0.45, 0.75, 0.35, 0.3) ) plot_compare_freq(freq_tab)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_apply_selector_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a selector to a collection of resampled designs — sb_apply_selector_manual","title":"Apply a selector to a collection of resampled designs — sb_apply_selector_manual","text":"Apply selector collection resampled designs","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_apply_selector_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a selector to a collection of resampled designs — sb_apply_selector_manual","text":"","code":"sb_apply_selector_manual(X_norm, resamples, Y, selector, ...)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_apply_selector_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a selector to a collection of resampled designs — sb_apply_selector_manual","text":"X_norm Normalised design matrix. resamples List matrices returned sb_resample_groups(). Y Numeric response. selector Variable-selection routine; function character string. ... Extra arguments passed selector.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_apply_selector_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a selector to a collection of resampled designs — sb_apply_selector_manual","text":"numeric matrix coefficients one column per resample.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_beta.html","id":null,"dir":"Reference","previous_headings":"","what":"SelectBoost for beta-regression models — sb_beta","title":"SelectBoost for beta-regression models — sb_beta","text":"sb_beta() orchestrates SelectBoost stages-normalisation, correlation analysis, grouping, correlated resampling, stability tallying-using beta-regression selectors provided package.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SelectBoost for beta-regression models — sb_beta","text":"","code":"sb_beta(   X,   Y,   selector = betareg_step_aic,   corrfunc = \"cor\",   B = 100,   step.num = 0.1,   steps.seq = NULL,   version = c(\"glmnet\", \"lars\"),   squeeze = TRUE,   use.parallel = FALSE,   seed = NULL,   verbose = FALSE,   threshold = 1e-04,   ... )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SelectBoost for beta-regression models — sb_beta","text":"X Numeric design matrix. Coerced .matrix() normalised via sb_normalize(). Y Numeric response vector. Values squeezed open unit interval unless squeeze = FALSE. selector Selection routine. Defaults betareg_step_aic(). corrfunc Correlation function passed sb_compute_corr(). B Number replicates generate. step.num Step length automatically generated c0 grid. steps.seq Optional user-supplied grid absolute correlation thresholds. version Either \"glmnet\" (intercept first row) \"lars\". squeeze Logical; ensure response lies (0, 1). use.parallel Logical; reserved future implementations parallel resampling. Currently ignored. seed Optional integer seed reproducibility. verbose Logical; emit progress messages. threshold Numeric tolerance considering coefficient selected. ... Additional arguments forwarded selector.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SelectBoost for beta-regression models — sb_beta","text":"Matrix selection frequencies one row per c0 level. object carries class \"sb_beta\" records attributes comparable historical SelectBoost implementation.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_beta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SelectBoost for beta-regression models — sb_beta","text":"","code":"set.seed(42) sim <- simulation_DATA.beta(n = 80, p = 4, s = 2) res <- sb_beta(sim$X, sim$Y, B = 10) res #>             x1  x2  x3  x4 #> c0 = 1.000 1.0 1.0 0.0 0.0 #> c0 = 0.126 0.2 1.0 0.3 0.3 #> c0 = 0.113 0.0 0.2 0.0 0.1 #> c0 = 0.025 0.1 0.3 0.2 0.2 #> c0 = 0.000 0.2 0.0 0.3 0.1 #> attr(,\"c0.seq\") #> [1] 1.00000000 0.12616304 0.11291203 0.02454839 0.00000000 #> attr(,\"steps.seq\") #> [1] 0.12616304 0.11291203 0.02454839 #> attr(,\"B\") #> [1] 10 #> attr(,\"selector\") #> [1] \"betareg_step_aic\" #> attr(,\"class\") #> [1] \"sb_beta\" \"matrix\"  \"array\""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Core helpers for SelectBoost-style beta regression — sb_normalize","title":"Core helpers for SelectBoost-style beta regression — sb_normalize","text":"helpers expose individual stages SelectBoost workflow beta-regression selectors can combined correlation-aware resampling directly SelectBoost.beta. normalise design matrix, derive correlation structures, form groups correlated predictors, generate Gaussian surrogates mimic observed dependency structure, apply user-provided selector resampled design.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core helpers for SelectBoost-style beta regression — sb_normalize","text":"","code":"sb_normalize(X, center = NULL, scale = NULL, eps = 1e-08)  sb_compute_corr(X, corrfunc = \"cor\")  sb_group_variables(corr_mat, c0)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core helpers for SelectBoost-style beta regression — sb_normalize","text":"X Numeric matrix predictors. center Optional centering vector recycled number columns. Defaults column means X. scale Optional scaling vector recycled number columns. Defaults column-wise \\(\\ell_2\\) norms centred matrix. eps Small positive constant used normalising columns. corrfunc Function character string used compute pairwise associations. Defaults \"cor\". corr_mat Numeric matrix associations. c0 Threshold applied absolute correlations.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Core helpers for SelectBoost-style beta regression — sb_normalize","text":"sb_normalize() returns centred, \\(\\ell_2\\)-scaled copy X. sb_compute_corr() returns association matrix. sb_group_variables() returns list integer vectors, one per variable, describing correlated group belongs .","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Core helpers for SelectBoost-style beta regression — sb_normalize","text":"","code":"sb_normalize(matrix(rnorm(20), 5)) #>            [,1]        [,2]       [,3]       [,4] #> [1,] -0.3151447 -0.01950574  0.2440691  0.3051062 #> [2,] -0.5242220 -0.54491941 -0.4022885  0.1989476 #> [3,]  0.2564657  0.76188516  0.7687388 -0.1054358 #> [4,] -0.1502584 -0.32535540 -0.2800823 -0.8225125 #> [5,]  0.7331595  0.12789540 -0.3304371  0.4238945 #> attr(,\"center\") #> [1] -0.362358849  0.324218844 -0.224694673  0.008141732 #> attr(,\"scale\") #> [1] 2.433633 1.431647 2.769985 2.826877"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_resample_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate correlated design replicates for a set of groups — sb_resample_groups","title":"Generate correlated design replicates for a set of groups — sb_resample_groups","text":"Generate correlated design replicates set groups","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_resample_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate correlated design replicates for a set of groups — sb_resample_groups","text":"","code":"sb_resample_groups(X_norm, groups, B = 100, jitter = 1e-06, seed = NULL)"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_resample_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate correlated design replicates for a set of groups — sb_resample_groups","text":"X_norm Normalised design matrix. groups Correlation structure. Either list returned sb_group_variables() vector group labels matching columns X_norm. B Number replicates generate. jitter Numeric value added covariance diagonals stability. seed Optional integer seed reproducibility.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_resample_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate correlated design replicates for a set of groups — sb_resample_groups","text":"list length B, element resampled design matrix.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_selection_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute selection frequencies from coefficient paths — sb_selection_frequency","title":"Compute selection frequencies from coefficient paths — sb_selection_frequency","text":"Compute selection frequencies coefficient paths","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_selection_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute selection frequencies from coefficient paths — sb_selection_frequency","text":"","code":"sb_selection_frequency(   coef_matrix,   version = c(\"glmnet\", \"lars\"),   threshold = 1e-04 )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_selection_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute selection frequencies from coefficient paths — sb_selection_frequency","text":"coef_matrix Matrix produced sb_apply_selector_manual(). version Either \"glmnet\" (first row intercept) \"lars\". threshold Coefficients absolute value threshold treated zero.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/sb_selection_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute selection frequencies from coefficient paths — sb_selection_frequency","text":"Numeric vector selection frequencies.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/simulation_DATA.beta.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate interval Beta-regression data (flexible) — simulation_DATA.beta","title":"Simulate interval Beta-regression data (flexible) — simulation_DATA.beta","text":"Simulate interval Beta-regression data (flexible)","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/simulation_DATA.beta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate interval Beta-regression data (flexible) — simulation_DATA.beta","text":"","code":"simulation_DATA.beta(   n,   p,   s = min(5L, p),   beta_size = 1,   a0 = 0,   X_dist = c(\"gaussian\", \"t\", \"bernoulli\"),   corr = c(\"indep\", \"ar1\", \"block\"),   rho = 0,   block_size = 5L,   df = 5,   prob = 0.5,   active_idx = NULL,   phi = 20,   mechanism = c(\"jitter\", \"quantile\", \"mixed\"),   mix_prob = 0.5,   delta = 0.05,   delta_low = NULL,   delta_high = NULL,   alpha = 0.1,   alpha_low = NULL,   alpha_high = NULL,   na_rate = 0,   na_side = c(\"random\", \"left\", \"right\"),   centerX = FALSE,   scaleX = FALSE,   seed = NULL )"},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/simulation_DATA.beta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate interval Beta-regression data (flexible) — simulation_DATA.beta","text":"n, p Sample size number predictors. s Number active (nonzero) coefficients. beta_size Scalar (alternating ±) numeric vector length greater equal s. a0 Intercept (logit scale). X_dist Distribution X: \"gaussian\", \"t\", \"bernoulli\". corr Correlation structure: \"indep\", \"ar1\", \"block\". rho AR(1) correlation within-block correlation. block_size Block size corr = \"block\" (default 5). df Degrees freedom X_dist = \"t\" (default 5). prob Success prob X_dist = \"bernoulli\" (default 0.5). active_idx Optional integer vector active feature indices (length s). NULL, uses 1:s. phi Precision parameter: scalar, length-n vector, function (mu, X) -> length-n. mechanism Interval mechanism per row: \"jitter\", \"quantile\", \"mixed\". mix_prob Probability jitter mechanism = \"mixed\". delta Symmetric jitter half-width (scalar / vector / function). delta_low, delta_high Asymmetric jitter widths (override delta set). alpha Miscoverage quantile intervals (scalar / vector / function). alpha_low, alpha_high Asymmetric miscoverage (override alpha set). na_rate Fraction rows missing bound (default 0). na_side bound drop: \"left\", \"right\", \"random\". centerX, scaleX Whether center/scale X returning. seed RNG seed.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/reference/simulation_DATA.beta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate interval Beta-regression data (flexible) — simulation_DATA.beta","text":"list X, Y, Y_low, Y_high, mu, beta, a0, phi, info, settings.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-045","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.5","title":"SelectBoost.beta 0.4.5","text":"Added pseudo-code vignette, refreshed README workflow details, expanded unit test suite new helpers. Fixed code descriptions get rid notes CRAN checks.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-044","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.4","title":"SelectBoost.beta 0.4.4","text":"Add NEWS.md documenting development history.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-043","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.3","title":"SelectBoost.beta 0.4.3","text":"Added sb_beta() run full SelectBoost correlated-resampling loop beta-regression selectors, plus vignette illustrating workflow. Added vignette section demonstrating extended simulator interval selection.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-042","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.2","title":"SelectBoost.beta 0.4.2","text":"interval = \"jitter\" (symmetric) \"quantile\" (Beta quantile intervals). Works fastboost_interval(); added small vignette unit test. Supports mixed mechanisms (row-wise jitter vs quantile), asymmetric jitter widths (delta_low/delta_high), asymmetric quantile coverage (alpha_low/alpha_high), covariate-driven parameters (accept functions (mu, X)), optional missing bounds per row (na_rate, na_side).","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-041","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.1","title":"SelectBoost.beta 0.4.1","text":"compare_selectors_single(), compare_selectors_bootstrap() run selectors (AIC/BIC/AICc, GAMLSS LASSO/ENet*, GLMNET) compute selection frequencies. plot_compare_coeff(), plot_compare_freq() heatmaps compare selectors side side. Vignette expanded include simulated data two real-ish datasets scaling (0,1). ENet requires gamlss.lasso installed.","code":""},{"path":"https://fbertran.github.io/SelectBoost.beta/news/index.html","id":"selectboostbeta-040","dir":"Changelog","previous_headings":"","what":"SelectBoost.beta 0.4.0","title":"SelectBoost.beta 0.4.0","text":"Stepwise AIC, BIC, AICc wrappers around betareg. GAMLSS LASSO (gamlss::ri) optional Elastic-Net (gamlss.lasso::gnet). Pure glmnet (IRLS + weighted Gaussian ENet) optional prestandardize. fastboost_interval() prototype interval responses. First vignette + roxygenized docs.","code":""}]
